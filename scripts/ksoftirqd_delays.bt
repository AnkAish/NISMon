#!/usr/bin/bpftrace
#include <linux/sched.h>

BEGIN {
  printf("Monitoring ksoftirqd delays...\n");
  @count = 0; // Initialize a counter
}

kprobe:wake_up_process {
  $task = (struct task_struct *)arg0;
  $comm = $task->comm;
  if (strncmp($comm, "ksoftirqd", 9) == 0) {
    $cpu = $task->cpu;
    @wakeup_time[$comm, $cpu] = nsecs; // Record wakeup time
  }
}

kretprobe:pick_next_task_fair {
  $next = (struct task_struct *)retval;
  $comm = $next->comm;
  $cpu = $next->cpu;
  if (strncmp($comm, "ksoftirqd", 9) == 0 && @wakeup_time[$comm, $cpu] != 0) {
    $delay = nsecs - @wakeup_time[$comm, $cpu]; // Calculate delay
    $delay_us = $delay / 1000; // Convert to microseconds
    @max_delay_us[$comm, $cpu] = max($delay_us); // Track maximum delay
    @avg_delay_us[$comm, $cpu] = avg($delay_us); // Track average delay
    delete(@wakeup_time[$comm, $cpu]); // Clean up wakeup time
  }
}

interval:s:1 {
  time("=== %Y-%m-%d %H:%M:%S ===\n"); // Print timestamp
  print(@max_delay_us); // Print maximum delays
  print(@avg_delay_us); // Print average delays
  @count++; // Increment counter
  if (@count == 2) { // After first run (1 second)
    exit(); // Exit the script
  }
}

END {
  clear(@wakeup_time); // Clean up maps
  clear(@max_delay_us);
  clear(@avg_delay_us);
}
